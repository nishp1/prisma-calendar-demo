datasource postgresql {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider = "prisma-client-js"
}

enum Repeat {
  NONE
  DAILY
  WEEKLY
  WEEKDAY
  MONTHLY
  ANNUALLY
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

enum FilterType {
  HOST
  TAG
  LOCATION
}

// Main types
model Account {
  id                        String        @default(uuid()) @id
  createdAt                 DateTime      @default(now())
  settings                  String
  stripe_accountId          String?       @unique
  stripe_refreshToken       String?
  stripe_customerId         String?       @unique
  stripe_subscriptionStatus String?
  owner                     User          @relation(fields: [ownerId], references: [id])
  ownerId                   String
  eventParents              EventParent[]
  filters                   Filter[]
  CartBooking               CartBooking[]
  Cart                      Cart[]
}

model User {
  id           String        @default(uuid()) @id
  createdAt    DateTime      @default(now())
  auth0_userId String        @unique
  isGuest      Boolean?      @unique
  bookings     Booking[]
  account      Account?
  eventParents EventParent[]
  Cart         Cart[]
}

// Events
model Event {
  id              String           @default(uuid()) @id
  createdAt       DateTime         @default(now())
  title           String
  description     String
  price           Int
  spaces          Int
  duration        Float
  filters         Filter[]         @relation(references: [id])
  eventParents    EventParent[]
  eventExceptions EventException[]
}

model EventParent {
  id              String              @default(uuid()) @id
  createdAt       DateTime            @default(now())
  deletedAt       DateTime?
  isPublished     Boolean
  rule            String
  createdBy       User                @relation(fields: [createdByUserId], references: [id])
  createdByUserId String
  account         Account             @relation(fields: [accountId], references: [id])
  accountId       String
  exceptions      EventException[]
  cancellations   EventCancellation[]
  event           Event               @relation(fields: [eventId], references: [id])
  eventId         String
}

model EventException {
  id           String      @default(uuid()) @id
  createdAt    DateTime    @default(now())
  originalDate DateTime
  date         DateTime
  cancelled    Boolean     @default(false)
  bookings     Booking[]
  parent       EventParent @relation(fields: [parentId], references: [id])
  parentId     String
  event        Event       @relation(fields: [eventId], references: [id])
  eventId      String
}

model EventCancellation {
  id           String      @default(uuid()) @id
  createdAt    DateTime    @default(now())
  originalDate DateTime
  parent       EventParent @relation(fields: [parentId], references: [id])
  parentId     String
}

model Filter {
  id          String     @default(uuid()) @id
  createdAt   DateTime   @default(now())
  name        String
  description String?
  type        FilterType
  account     Account    @relation(fields: [accountId], references: [id])
  accountId   String
  events      Event[]    @relation(references: [id])
}

model Booking {
  id               String         @default(uuid()) @id
  createdAt        DateTime       @default(now())
  spaces           Int
  cancelled        Boolean        @default(false)
  eventException   EventException @relation(fields: [eventExceptionId], references: [id])
  eventExceptionId String
  user             User           @relation(fields: [userId], references: [id])
  userId           String
  guest            Guest?         @relation(fields: [guestId], references: [id])
  guestId          String?
  cartBooking      CartBooking?
}

// If a booking is made as a guest,
// save the extra details for that user
model Guest {
  id          String    @default(uuid()) @id
  email       String
  phoneNumber String
  Booking     Booking[]
  Cart        Cart[]
}

model Cart {
  id                     String        @default(uuid()) @id
  createdAt              DateTime      @default(now())
  cartReference          String
  refunded               Boolean       @default(false)
  paymentStatus          PaymentStatus @default(PENDING)
  stripe_paymentIntentId String?       @unique
  pendingItems           Json
  cartBooking            CartBooking[]
  user                   User          @relation(fields: [userId], references: [id])
  userId                 String
  guest                  Guest?        @relation(fields: [guestId], references: [id])
  guestId                String?
  account                Account       @relation(fields: [accountId], references: [id])
  accountId              String
}

model CartBooking {
  id            String  @default(uuid()) @id
  refunded      Boolean @default(false)
  paymentAmount Int

  cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    String
  booking   Booking  @relation(fields: [bookingId], references: [id])
  bookingId String
  Account   Account? @relation(fields: [accountId], references: [id])
  accountId String?
}
