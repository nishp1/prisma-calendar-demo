"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var path = require("path");
var graphql_1 = require("graphql");
var types_1 = require("./types");
var typescriptResolverGenerator_1 = require("./typescriptResolverGenerator");
var typescriptGenerator_1 = require("./typescriptGenerator");
var utils_1 = require("./utils");
var util_1 = require("util");
var packageJson = require(path.join(__dirname, '../package.json'));
var jsDoc = "/**\n * This file is auto-generated by " + packageJson.name + "\n * Please note that any changes in this file may be overwritten\n */\n \n";
var typeDefsDecoration = [
    '/*******************************',
    ' *                             *',
    ' *          TYPE DEFS          *',
    ' *                             *',
    ' *******************************/'
];
var typeResolversDecoration = [
    '/*********************************',
    ' *                               *',
    ' *         TYPE RESOLVERS        *',
    ' *                               *',
    ' *********************************/'
];
exports.generateTSTypesAsString = function (schema, options) { return __awaiter(_this, void 0, void 0, function () {
    var mergedOptions, introspectResult, schemaPath, exists, _a, schemaViaStr, tsGenerator, typeDefs, typeResolvers, tsResolverGenerator, header, body, formatted;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                mergedOptions = __assign({}, types_1.defaultOptions, options);
                if (!util_1.isString(schema)) return [3 /*break*/, 8];
                _b.label = 1;
            case 1:
                _b.trys.push([1, 4, , 5]);
                schemaPath = path.resolve(schema);
                exists = fs.existsSync(schemaPath);
                if (!exists) return [3 /*break*/, 3];
                return [4 /*yield*/, utils_1.introspectSchemaViaLocalFile(schemaPath)];
            case 2:
                introspectResult = _b.sent();
                _b.label = 3;
            case 3: return [3 /*break*/, 5];
            case 4:
                _a = _b.sent();
                return [3 /*break*/, 5];
            case 5:
                if (!!introspectResult) return [3 /*break*/, 7];
                schemaViaStr = graphql_1.buildSchema(schema);
                return [4 /*yield*/, utils_1.introspectSchema(schemaViaStr)];
            case 6:
                introspectResult = _b.sent();
                _b.label = 7;
            case 7: return [3 /*break*/, 10];
            case 8: return [4 /*yield*/, utils_1.introspectSchema(schema)];
            case 9:
                introspectResult = _b.sent();
                _b.label = 10;
            case 10:
                tsGenerator = new typescriptGenerator_1.TypeScriptGenerator(mergedOptions, introspectResult);
                return [4 /*yield*/, tsGenerator.generate()];
            case 11:
                typeDefs = _b.sent();
                typeResolvers = {
                    body: [],
                    importHeader: []
                };
                tsResolverGenerator = new typescriptResolverGenerator_1.TSResolverGenerator(mergedOptions, introspectResult);
                return [4 /*yield*/, tsResolverGenerator.generate()];
            case 12:
                typeResolvers = _b.sent();
                header = typeResolvers.importHeader.concat([jsDoc]);
                body = typeDefsDecoration.concat(typeDefs, typeResolversDecoration, typeResolvers.body);
                if (mergedOptions.namespace) {
                    body = [
                        "namespace " + options.namespace + " {"
                    ].concat(body, [
                        '}'
                    ]);
                }
                if (mergedOptions.global) {
                    body = [
                        'export { };',
                        '',
                        'declare global {'
                    ].concat(body, [
                        '}'
                    ]);
                }
                formatted = utils_1.formatTabSpace(header.concat(body), mergedOptions.tabSpaces);
                return [2 /*return*/, formatted.join('\n')];
        }
    });
}); };
function generateTypeScriptTypes(schema, outputPath, options) {
    if (options === void 0) { options = types_1.defaultOptions; }
    return __awaiter(this, void 0, void 0, function () {
        var content;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, exports.generateTSTypesAsString(schema, options)];
                case 1:
                    content = _a.sent();
                    fs.writeFileSync(outputPath, content, 'utf-8');
                    return [2 /*return*/];
            }
        });
    });
}
exports.generateTypeScriptTypes = generateTypeScriptTypes;
